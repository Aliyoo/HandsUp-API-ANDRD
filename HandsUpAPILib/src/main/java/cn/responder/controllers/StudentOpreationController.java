/*
 * HandsUpAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/26/2016
 */
package cn.responder.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import cn.responder.http.client.HttpClient;
import cn.responder.http.client.HttpContext;
import cn.responder.http.request.HttpRequest;
import cn.responder.http.response.HttpResponse;
import cn.responder.http.response.HttpStringResponse;
import cn.responder.http.client.APICallBack;
import cn.responder.*;
import cn.responder.models.*;

public class StudentOpreationController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static StudentOpreationController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the StudentOpreationController class 
     */
    public static StudentOpreationController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new StudentOpreationController();
            }
        }
        return instance;
    }

    /**
     * 学生查询课程
     * @param    courseName    Required parameter: 表示要查询课程的名称
     * @param    tchName    Required parameter: 表示要查询课程的老师名字
     * @return	Returns the void response from the API call 
     */
    public void getQueryCourseAsync(
                final String courseName,
                final String tchName,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == courseName)
            throw new NullPointerException("The parameter \"courseName\" is a required parameter and cannot be null.");

        if (null == tchName)
            throw new NullPointerException("The parameter \"tchName\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/querycourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5626224950246514842L;
            {
                    put( "courseName", courseName );
                    put( "tchName", tchName );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5454475155552234845L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 学生查询已选课程
     * @param    stuId    Required parameter: 表示要查询课程的学生编号
     * @param    stuNumber    Required parameter: 表示要查询课程的学生学号
     * @return	Returns the void response from the API call 
     */
    public void getSeletedCourseAsync(
                final String stuId,
                final String stuNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == stuId)
            throw new NullPointerException("The parameter \"stuId\" is a required parameter and cannot be null.");

        if (null == stuNumber)
            throw new NullPointerException("The parameter \"stuNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/stugetcourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5166217446259584947L;
            {
                    put( "stuId", stuId );
                    put( "stuNumber", stuNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5033928500978130601L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 学生取消课程
     * @param    courseId    Required parameter: 表示要选择课程的编号
     * @param    stuId    Required parameter: 表示要选择课程的学生编号
     * @param    stuNumber    Required parameter: 表示要选择课程的学生编号
     * @return	Returns the void response from the API call 
     */
    public void getCancelSelectedCourseAsync(
                final String courseId,
                final String stuId,
                final String stuNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == courseId)
            throw new NullPointerException("The parameter \"courseId\" is a required parameter and cannot be null.");

        if (null == stuId)
            throw new NullPointerException("The parameter \"stuId\" is a required parameter and cannot be null.");

        if (null == stuNumber)
            throw new NullPointerException("The parameter \"stuNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/cancelselectcourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5429667861090789705L;
            {
                    put( "courseId", courseId );
                    put( "stuId", stuId );
                    put( "stuNumber", stuNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4841201348709187935L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 学生选择课程
     * @param    courseId    Required parameter: 表示要选择课程的编号
     * @param    stuId    Required parameter: 表示要选择课程的学生编号
     * @param    stuNumber    Required parameter: 表示要选择课程的学生学号
     * @return	Returns the void response from the API call 
     */
    public void getSelectCourseAsync(
                final String courseId,
                final String stuId,
                final String stuNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == courseId)
            throw new NullPointerException("The parameter \"courseId\" is a required parameter and cannot be null.");

        if (null == stuId)
            throw new NullPointerException("The parameter \"stuId\" is a required parameter and cannot be null.");

        if (null == stuNumber)
            throw new NullPointerException("The parameter \"stuNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/selectcourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5132095928897611142L;
            {
                    put( "courseId", courseId );
                    put( "stuId", stuId );
                    put( "stuNumber", stuNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4852211146428434630L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 学生抢答
     * @param    answerTime    Required parameter: 表示抢答的时间
     * @param    stuId    Required parameter: 表示抢答学生的编号
     * @param    stuNumber    Required parameter: 表示抢答学生的工号
     * @return	Returns the void response from the API call 
     */
    public void getToAnswerAsync(
                final String answerTime,
                final String stuId,
                final String stuNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == answerTime)
            throw new NullPointerException("The parameter \"answerTime\" is a required parameter and cannot be null.");

        if (null == stuId)
            throw new NullPointerException("The parameter \"stuId\" is a required parameter and cannot be null.");

        if (null == stuNumber)
            throw new NullPointerException("The parameter \"stuNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/answer");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5464889266979185423L;
            {
                    put( "answerTime", answerTime );
                    put( "stuId", stuId );
                    put( "stuNumber", stuNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5558205297432666335L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}