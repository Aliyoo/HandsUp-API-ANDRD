/*
 * HandsUpAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/09/2016
 */
package cn.responder.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import cn.responder.http.client.HttpClient;
import cn.responder.http.client.HttpContext;
import cn.responder.http.request.HttpRequest;
import cn.responder.http.response.HttpResponse;
import cn.responder.http.response.HttpStringResponse;
import cn.responder.http.client.APICallBack;
import cn.responder.*;
import cn.responder.models.*;

public class LoginorEnrollController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static LoginorEnrollController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the LoginorEnrollController class 
     */
    public static LoginorEnrollController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new LoginorEnrollController();
            }
        }
        return instance;
    }

    /**
     * 注册
     * @param    userName    Required parameter: 表示注册者的姓名
     * @param    userNumber    Required parameter: 表示注册者的学号或者工号
     * @param    userPassword    Required parameter: 表示注册者的明文（未加密）
     * @param    userRole    Required parameter: 表示注册者的身份，"student"为学生，"teacher"为老师
     * @return	Returns the void response from the API call 
     */
    public void getEnrollAsync(
                final String userName,
                final String userNumber,
                final String userPassword,
                final String userRole,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == userName)
            throw new NullPointerException("The parameter \"userName\" is a required parameter and cannot be null.");

        if (null == userNumber)
            throw new NullPointerException("The parameter \"userNumber\" is a required parameter and cannot be null.");

        if (null == userPassword)
            throw new NullPointerException("The parameter \"userPassword\" is a required parameter and cannot be null.");

        if (null == userRole)
            throw new NullPointerException("The parameter \"userRole\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/register");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5454935696866262733L;
            {
                    put( "userName", userName );
                    put( "userNumber", userNumber );
                    put( "userPassword", userPassword );
                    put( "userRole", userRole );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4946090538068869936L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 登录
     * @param    userNumber    Required parameter: 表示用户的学号或者工号
     * @param    userPassword    Required parameter: 表示用户的明文（未加密）
     * @param    userRole    Required parameter: 表示用户的身份，"student"为学生，"teacher"为老师
     * @return	Returns the void response from the API call 
     */
    public void getLoginAsync(
                final String userNumber,
                final String userPassword,
                final String userRole,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == userNumber)
            throw new NullPointerException("The parameter \"userNumber\" is a required parameter and cannot be null.");

        if (null == userPassword)
            throw new NullPointerException("The parameter \"userPassword\" is a required parameter and cannot be null.");

        if (null == userRole)
            throw new NullPointerException("The parameter \"userRole\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/login");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4958816227552756676L;
            {
                    put( "userNumber", userNumber );
                    put( "userPassword", userPassword );
                    put( "userRole", userRole );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5373829893804503179L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}