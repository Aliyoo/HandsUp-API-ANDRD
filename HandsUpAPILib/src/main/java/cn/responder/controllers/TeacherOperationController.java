/*
 * HandsUpAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/26/2016
 */
package cn.responder.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import cn.responder.http.client.HttpClient;
import cn.responder.http.client.HttpContext;
import cn.responder.http.request.HttpRequest;
import cn.responder.http.response.HttpResponse;
import cn.responder.http.response.HttpStringResponse;
import cn.responder.http.client.APICallBack;
import cn.responder.*;
import cn.responder.models.*;

public class TeacherOperationController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static TeacherOperationController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TeacherOperationController class 
     */
    public static TeacherOperationController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new TeacherOperationController();
            }
        }
        return instance;
    }

    /**
     * 老师添加课程
     * @param    courseName    Required parameter: 表示所添加课程的名称
     * @param    courseTime    Required parameter: 表示所添加课程的上课时间，json数组的格式
     * @param    tchId    Required parameter: 表示所添加课程的上课老师编号
     * @param    tchNumber    Required parameter: 表示所添加课程的上课老师工号
     * @return	Returns the void response from the API call 
     */
    public void getAddCourseAsync(
                final String courseName,
                final String courseTime,
                final String tchId,
                final String tchNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == courseName)
            throw new NullPointerException("The parameter \"courseName\" is a required parameter and cannot be null.");

        if (null == courseTime)
            throw new NullPointerException("The parameter \"courseTime\" is a required parameter and cannot be null.");

        if (null == tchId)
            throw new NullPointerException("The parameter \"tchId\" is a required parameter and cannot be null.");

        if (null == tchNumber)
            throw new NullPointerException("The parameter \"tchNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/addcourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4716460259111807003L;
            {
                    put( "courseName", courseName );
                    put( "courseTime", courseTime );
                    put( "tchId", tchId );
                    put( "tchNumber", tchNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5342638119931805724L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 老师获取抢答结果
     * @param    tchId    Required parameter: 教师ID
     * @param    tchNumber    Required parameter: 教师工号
     * @return	Returns the void response from the API call 
     */
    public void getAnswerListAsync(
                final String tchId,
                final String tchNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == tchId)
            throw new NullPointerException("The parameter \"tchId\" is a required parameter and cannot be null.");

        if (null == tchNumber)
            throw new NullPointerException("The parameter \"tchNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/getanswerlist");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5454307236885090917L;
            {
                    put( "tchId", tchId );
                    put( "tchNumber", tchNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4683216755214807062L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 删除课程
     * @param    courseId    Required parameter: 表示要删除课程的编号
     * @param    tchId    Required parameter: 表示要删除课程的编号
     * @param    tchNumber    Required parameter: 表示要删除课程的老师工号
     * @return	Returns the void response from the API call 
     */
    public void getDeleteCourseAsync(
                final String courseId,
                final String tchId,
                final String tchNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == courseId)
            throw new NullPointerException("The parameter \"courseId\" is a required parameter and cannot be null.");

        if (null == tchId)
            throw new NullPointerException("The parameter \"tchId\" is a required parameter and cannot be null.");

        if (null == tchNumber)
            throw new NullPointerException("The parameter \"tchNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/deletecourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4933917145188769643L;
            {
                    put( "courseId", courseId );
                    put( "tchId", tchId );
                    put( "tchNumber", tchNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4841485713221442149L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 教师查看已加课程
     * @param    tchId    Required parameter: 表示要查询课程的老师编号
     * @param    tchNumber    Required parameter: 表示要查询课程的老师工号
     * @return	Returns the void response from the API call 
     */
    public void getAddedCourseAsync(
                final String tchId,
                final String tchNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == tchId)
            throw new NullPointerException("The parameter \"tchId\" is a required parameter and cannot be null.");

        if (null == tchNumber)
            throw new NullPointerException("The parameter \"tchNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/tchgetcourse");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4957975247758213965L;
            {
                    put( "tchId", tchId );
                    put( "tchNumber", tchNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4886031907592162383L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 教师发起抢答
     * @param    questionTime    Required parameter: 表示发起抢答的时间（NTP同步时间）
     * @param    tchId    Required parameter: 表示发起抢答老师的编号
     * @param    tchNumber    Required parameter: 表示发起抢答老师的工号
     * @return	Returns the void response from the API call 
     */
    public void getQuestionAsync(
                final String questionTime,
                final String tchId,
                final String tchNumber,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == questionTime)
            throw new NullPointerException("The parameter \"questionTime\" is a required parameter and cannot be null.");

        if (null == tchId)
            throw new NullPointerException("The parameter \"tchId\" is a required parameter and cannot be null.");

        if (null == tchNumber)
            throw new NullPointerException("The parameter \"tchNumber\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/question");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4797966744294900416L;
            {
                    put( "questionTime", questionTime );
                    put( "tchId", tchId );
                    put( "tchNumber", tchNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5527934692723957977L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}